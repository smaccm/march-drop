/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(NICTA_BSD)
 */

import <std_connector.camkes>;

//import "components/uart/uart.camkes";
//import "components/gpio/gpio.camkes";
//import "components/pilot/pilot.camkes";
import "components/VM/VM.camkes";
//import "components/pwm/pwm.camkes";
//import "components/spi/spi.camkes";
//import "components/can/can.camkes";
//import "components/clk/clk.camkes";
import "components/timer/timer.camkes";
import "components/dispatch_periodic/dispatch_periodic.camkes";
import "components/sender/sender.camkes";
import "components/receiver/receiver.camkes";

/*
component uartbase {
    hardware;
    dataport Buf mem;
    emits DataAvailable	irq;
}
*/

/*
component gpiobase {
    hardware;
    dataport Buf gpio1base;
    dataport Buf gpio2base;
    dataport Buf irqcbase;
    dataport Buf clk_tree;
    emits IRQGroup26 irq_grp26_int;
    emits IRQGroup28 irq_grp28_int;
    emits IRQGroup31 irq_grp31_int;
    emits EXINT16_31 xint16_31_int;
}
*/

/*
component i2c0 {
    hardware;
    dataport Buf i2c0_reg;
    emits DataAvailable i2c0_int;
}
*/

/*
component clkbase {
    hardware;
    include "components/clk/include/porttype.h";
    dataport CLKData_t cmu_cpu_clk;
    dataport Buf	   cmu_core_clk;
    dataport CLKData_t cmu_top_clk;
}
*/

/*
component spibase {
	hardware;
	dataport Buf spi1_reg;
	emits DataAvailable spi1_int;
}
*/

/* Timer component from AADL assembly */
/*
component EPIT {
    hardware;
    dataport Buf mem;
    emits DataAvailable irq;
}
*/
/* end timer component */ 

assembly {
    composition {
        component VM vm;
//        component uartbase uartbase_gcs;
//        component uartbase uartbase_px4;
//        component gpiobase gpiobase_obj;
//        component i2c0     i2c0_obj;
//	component spibase  spibase_obj;
//        component clkbase   clkbase_obj;
        component timerbase timerbase_obj;

//        component gpio     gpio_obj;
//        component uart     uart_gcs;
//        component uart     uart_px4;
//        component pilot    pilot_obj;
//        component pwm      pwm_obj;
//	component spi      spi_obj;
//	component can      can_obj;
//        component clk      clk_obj;
//      component timer	   timer_obj;

//        connection seL4HardwareMMIO gpio_mem1(from gpio_obj.gpio1base, to gpiobase_obj.gpio1base);
//        connection seL4HardwareMMIO gpio_mem2(from gpio_obj.gpio2base, to gpiobase_obj.gpio2base);
//        connection seL4HardwareMMIO gpio_mem3(from gpio_obj.irqcbase, to gpiobase_obj.irqcbase);
//        connection seL4HardwareMMIO gpio_clk(from gpio_obj.clk_tree, to gpiobase_obj.clk_tree);

//        connection seL4HardwareMMIO clk_cmu_cpu_mem(from clk_obj.cmu_cpu_clk, to clkbase_obj.cmu_cpu_clk);
//        connection seL4HardwareMMIO clk_cmu_top_mem(from clk_obj.cmu_top_clk, to clkbase_obj.cmu_top_clk);
//        connection seL4HardwareMMIO clk_cmu_core_mem(from clk_obj.cmu_core_clk, to clkbase_obj.cmu_core_clk);

        /* Interrupts */
//        connection seL4HardwareInterrupt spi1_irq(from spibase_obj.spi1_int, to spi_obj.spi1_int);
//        connection seL4HardwareInterrupt gpio_grp28_irq(from gpiobase_obj.irq_grp28_int, to gpio_obj.irq_grp28_int);
//        connection seL4HardwareInterrupt gpio_grp26_irq(from gpiobase_obj.irq_grp26_int, to gpio_obj.irq_grp26_int);
//        connection seL4HardwareInterrupt gpio_grp31_irq(from gpiobase_obj.irq_grp31_int, to gpio_obj.irq_grp31_int);
//        connection seL4HardwareInterrupt gpio_xint16_31_irq(from gpiobase_obj.xint16_31_int, to gpio_obj.xint16_31_int);

	/* SPI connections */
//        connection seL4RPCCall spi_gpio(from spi_obj.gpio, to gpio_obj.gpio);
//        connection seL4RPCCall spi_clk(from spi_obj.clktree, to clk_obj.clktree);
//        connection seL4HardwareMMIO spi1_mem(from spi_obj.spi1_reg, to spibase_obj.spi1_reg);

        /* Can driver */
//        connection seL4RPCCall 	  can_spi(from can_obj.spi, to spi_obj.spi);
//        connection seL4SharedData can_spi_channel	(from can_obj.spi_can,	to spi_obj.spi1_can);
//        connection seL4Asynch 	  gpio_can_int(from gpio_obj.CANInt, to can_obj.Int);
//        connection seL4Asynch 	  gpio_can_intAck(from can_obj.IntAck, to gpio_obj.CANIntAck);

	/* GCS hardware connection */
//        connection seL4HardwareMMIO uartbase_mem(from uart_gcs.uart0base, to uartbase_gcs.mem);
//        connection seL4HardwareInterrupt uartbase_irq(from uartbase_gcs.irq, to uart_gcs.interrupt);

	/* PX4 hardware connection */
//        connection seL4HardwareMMIO uartpx4_mem(from uart_px4.uart0base, to uartbase_px4.mem);
//        connection seL4HardwareInterrupt uartpx4_irq(from uartbase_px4.irq, to uart_px4.interrupt);

	/* Pilot connection */
//        connection seL4RPCCall uart_inf(from pilot_obj.uart_gcs, to uart_gcs.uart);
//        connection seL4SharedData uart_data(from pilot_obj.gcs_buf, to uart_gcs.client_buf);

//        connection seL4RPCCall uartpx4_inf(from pilot_obj.uart_px4, to uart_px4.uart);
//        connection seL4SharedData uartpx4_data(from pilot_obj.px4_buf, to uart_px4.client_buf);

	/* Recv connection */
//        connection seL4RPCCall gcs_recv_inf(from uart_gcs.pilot, to pilot_obj.mavlink);
//        connection seL4RPCCall px4_recv_inf(from uart_px4.pilot, to pilot_obj.mavlink);

        /* PWM connection */
//        connection seL4HardwareMMIO      i2c0_mem(from pwm_obj.i2c0, to i2c0_obj.i2c0_reg);
//        connection seL4HardwareInterrupt i2c0_irq(from i2c0_obj.i2c0_int, to pwm_obj.i2c0_int);
//        connection seL4RPCCall           fd_pwm(from pilot_obj.pwm, to pwm_obj.pwm);
//        connection seL4Asynch pwm_sig(from pilot_obj.signal, to pwm_obj.signal);
//        connection seL4Asynch pwm_timer(from timer_obj.timer_update, to pwm_obj.timer_update);

	/* PWM timer connections */
//        connection seL4HardwareMMIO timer_mem(from timer_obj.timerbase, to timerbase_obj.timer_reg);
//        connection seL4HardwareInterrupt timer_irq(from timerbase_obj.irq, to timer_obj.irq);

	/* VM to PWM */
//        connection seL4RPCCall           vm_pwm(from vm.pwm, to pwm_obj.pwm);

        /****************************************************************************
          AADL components and connections: copied from smaccm_ping_pong_impl_inst.camkes 
         ****************************************************************************/
//        component EPIT epit;    
        component dispatch_periodic dispatch_periodic_inst;

        // component instances for all AADL-defined threads
        component sender sender_inst;
        component receiver receiver_inst;

        // connections from active dispatchers to passive threads
        connection seL4RPCCall conn1 (from sender_inst.receiver_inst, to receiver_inst.dispatch);

        // connections from active dispatcher send/receive to other active dispatcher send/receive

        // Periodic dispatcher connections
        connection seL4RPCCall conn2 (from dispatch_periodic_inst.sender_periodic_10000_ms, to sender_inst.sender_periodic_10000_ms);

//        connection seL4HardwareMMIO epit_mem(from dispatch_periodic_inst.mem, to epit.mem);
//        connection seL4HardwareInterrupt irq(from epit.irq, to dispatch_periodic_inst.irq);
        connection seL4HardwareMMIO epit_mem(from dispatch_periodic_inst.mem, to timerbase_obj.timer_reg);
        connection seL4HardwareInterrupt irq(from timerbase_obj.irq, to dispatch_periodic_inst.irq);
        /* END AADL components */

    }

    configuration {
//        uartbase_gcs.mem_attributes = "0x12C30000:0x1000";
//        uartbase_gcs.irq_attributes = 86;                        //UART1 interrupt

//        uartbase_px4.mem_attributes = "0x12C10000:0x1000";
//        uartbase_px4.irq_attributes = 84;                        //UART1 interrupt

//        gpiobase_obj.gpio2base_attributes = "0x14000000:0x1000"; //GPIO
//        gpiobase_obj.gpio1base_attributes = "0x13400000:0x1000"; //GPIO
//        gpiobase_obj.clk_tree_attributes  = "0x10020000:0x1000"; //GPIO
//        gpiobase_obj.irqcbase_attributes  = "0x10440000:0x1000"; //IRQ COMBINER
//        gpiobase_obj.irq_grp26_int_attributes = 58; //Combined IRQ group 26
//        gpiobase_obj.irq_grp28_int_attributes = 60; //Combined IRQ group 28
//        gpiobase_obj.irq_grp31_int_attributes = 63; //Combined IRQ group 31
//        gpiobase_obj.xint16_31_int_attributes = 64; //Extern Interrupt EINT16-EINT31

//        spibase_obj.spi1_reg_attributes = "0x12D30000:0x1000";    //SPI1
//	spibase_obj.spi1_int_attributes = 101;                    //SPI1  interrupt

//        clkbase_obj.cmu_cpu_clk_attributes 	= 	"0x10010000:0x1000";	//CMU_CPU
//        clkbase_obj.cmu_core_clk_attributes 	= 	"0x10014000:0x1000";	//CMU_CORE
//        clkbase_obj.cmu_top_clk_attributes 	= 	"0x10020000:0x1000";	//CMU_TOP

//        i2c0_obj.i2c0_reg_attributes = "0x12C60000:0x1000";
//        i2c0_obj.i2c0_int_attributes = 88;
 
        timerbase_obj.timer_reg_attributes     = "0x12DD0000:0x1000";	//PWM timers
        timerbase_obj.irq_attributes	       = 72;			//Timer interrupt

//	uart_gcs.ID = 1;
//	uart_px4.ID = 3;

        /* BEGIN AADL configuration bits */
//        epit.mem_attributes = "0x12DD0000:0x1000";
//        epit.irq_attributes = 72;
        /* END AADL configuration bits */

        vm.mmio = "0x10000000:0x1000:12"; // CHIP_ID
        vm.mmio = "0x10486000:0x1000:12"; // VCPU
        vm.mmio = "0x12c20000:0x1000:12"; // UART2
        vm.mmio = "0x13400000:0x1000:12"; // GPIO_RIGHT
        vm.mmio = "0x10040000:0x1000:12"; // POWER0
        vm.mmio = "0x10041000:0x1000:12"; // POWER1
        vm.mmio = "0x10042000:0x1000:12"; // POWER2
        vm.mmio = "0x10043000:0x1000:12"; // POWER3
        vm.mmio = "0x10044000:0x1000:12"; // POWER4
        vm.mmio = "0x10050000:0x1000:12"; // SYSREG
        vm.mmio = "0x10020000:0x1000:12"; // CMU_TOP
        vm.mmio = "0x10014000:0x1000:12"; // CMU_CORE
        vm.mmio = "0x10010000:0x1000:12"; // CMU_CPU
        vm.mmio = "0x10030000:0x1000:12"; // CMU_COREX
        vm.mmio = "0x10038000:0x1000:12"; // CMU_MEM
        vm.mmio = "0x1001c000:0x1000:12"; // CMU_ISP
        vm.mmio = "0x10018000:0x1000:12"; // CMU_ACP
        vm.mmio = "0x12110000:0x1000:12"; // USB EHCI
        vm.mmio = "0x12130000:0x1000:12"; // USB CTRL
        vm.mmio = "0x12200000:0x1000:12"; // MSH0
        vm.mmio = "0x12220000:0x1000:12"; // MSH2
        vm.mmio = "0x40000000:0x20000000:21"; // RAM

        vm.irq = "27";  // VTCNT (arch timer)
        vm.irq = "85";  // UART2
        vm.irq = "107"; // SDMMC0
        vm.irq = "109"; // SDMMC2
        vm.irq = "103"; // USB
        vm.asid_pool = true;

        vm.simple = true;
        vm.cnode_size_bits = 18;
        vm.simple_untyped24_pool = 10;

	vm._control_priority = 101;
	vm.sem_value = 0;
    }
}
